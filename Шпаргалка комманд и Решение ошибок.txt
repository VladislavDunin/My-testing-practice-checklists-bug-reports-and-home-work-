1. ls-показать все содержимое папки
2. cat "name the file" - показать содержимое файла
3. echo "название той строки,которое хотим добавить в файл" >> "наименование того файла ,который хотите создать" (echo "new line" >> new.file) - создание нового файла
4. git status - посмотреть в каком состоянии файлы в репозитории
5. git commit -a -m "new commit"(буква "а" означает,что мы хотим прокоммитить сразу все файлы,буква "m" означает сообщение)- добавить коммиты после изменения или добавления (в статусе modifaied) + с локальной  машины на удаленный репозиторий
6. git reset HEAD~1 - откатить на 1 шаг назад
7. git add "название файла" - добавить файл в наш репозиторий
8. git commmit -am "название папки" - закоммитить все новое в папке
9. git push - мы хотим залить изменения с нашего локального репозитория в удаленный
10. git pull - залить с удаленного в локальный
11. git diff - показать последние изменения
12. git merge --abort - передать разработчику
13. git add .
14. git checkout "название файла" - откатить изменения в файле
15. git checkout . - откатить все изменения из всех файлов
16. git stash - скрыть изменения в файлов во временное хранилище
17. git stash pop - вернуть изменения
18. git stash clear - удалять изменения из временного хранилища навсегда
19. git branch название ветки - создать ветку
20. git commit -am "название новой записи commit" - добавить коммит в ветку
21. git push -u origin название ветки - создание ветки на удаленном репозитории
22. git merge название ветки - поместить из ветки в основной коммит на мэйне

23. Если новое изменение:
1) git add "название файла"
2) git commit -m "сообщение"
3) git push

24. git fetch - показывает то,что у нас есть изменения на удаленном репозитории
Пример: произошли изменения на удаленном- мы пишем команды :
1)git fetch
2)git status
они показывают сколько изменений есть
3)git pull - добавили изменения из удаленного в локальный

25. git show спецификация коммита (например 5d679e7..e0420fa)
26. git blame - какие изменения вводил тот или иной автор
27. git blame file1.txt | grep vladislavDunin (тоже самое что и 26 пункт,только к определенному файлу)

28.echo "название строки в файле" >> название нового файла - добавить новый файл в папку (echo "new line" >> new.file)
29.git push origin :second_name - удалить имя на удаленном репозитории
30.git branch -m second_name first_name - переименовать ветку
31. git branch -d second_branch - удалить ветку
32. git fetch origin second_branch - вернуть удаленную ветку :
1)git checkout second_branch
33.gitk& при открытом git gui - схема активности

Работа с башем:

34.pwd - путь к папке
35. ls -la -показываются скрытые файлы и папки
36. mkdir - создать папку
37. cd "название папки"- перейти в папку
38.cat >> qq.txt - режим редактирования файла
39.cat > qq.txt - создать файл и редактировать его
40.cat > qq.txt/file.txt - создать файл в папке не заходя в папку
41.vim "название файла" - редактировать файл в консоли прямо
- нажать "i"
- затем редактировать
-после редактирования нажать "esc"
-что-бы выйти- :wq (write quit)
42.mv qa_1/q11.txt(что) qa_3/q11.txt(куда) - переместить файл из одной папки в другую
43.cp test1.txt qa1/test1.txt - копировать файл в другую папку
44.rm q1.txt - удалить файл
45.rm -r qa_1 - удалить папку
46.Start - открыть файл из консоли
47.grep test test1.txt - найти все записи в файле с данным именем
48.grep -R test test1 - найти с данным именем все в папке
49.tail -2 test1.txt - последние две строки в файле показать
50.head -2 test1.txt- первы две строки с конца 
- без цифры два , или с нужным количеством строк если надо
51.less test1.txt - посмотреть содержимое длинного файла и возможно листать окне терминала непосредственно сам файл без лишнего
52.date - вывести дату и время
53.curl "нужный http" - запрос на сервер
54.$ curl "http://162.55.220.72:5005/get_method?name=vladislav&age=25"- если требуются такие параметры
  

Скрипты:
54.pwd ; whoami - где я нахожусь + кто я
55.

#!bin/bash
#qwer
echo "Пример работы со скриптами"
echo "Выйти из папки с файлом скрипта"
cd ..
echo "еще раз"
cd ..
echo "перейти в папку"
cd folder1
echo "В ней создаем три папки"
for number in 1,2,3
do
        mkdir -p test1
        mkdir -p test2
        mkdir -p test3
done
echo "----"
cd test1
echo "Создаем файлы в первой папке"
echo "new text" >> test1.txt
echo "new text2" >> test2.txt
echo "new text3" >> test3.txt
echo "new text4" >> test4.json
echo "new text5" >> test5.json
echo "создаем еще три папки"
for number in 1,2,3
do
        mkdir -p qa1
        mkdir -p qa2
        mkdir -p qa3
done
echo "выводим содержимое папки"
ls
echo "переносим любые два файла в любую папку"
mv test1.txt qa1/test1.txt
mv test2.txt qa1/test2.txt
echo "конец"











Ошибки:
1.Ошибка "fatal: The current branch first_branch has no upstream branch." - означает,что на удаленном репозитории нет новой ветки ,которую мы создали на локальном и нужно ее скопировать так же и туда:
1)git push -u origin название ветки

2. rm -f .git/index.lock - вводить , если говорит о том,что запущен другой процесс git

3. вылазит голубая консоль с текстом о merge-это дефолтная ошибка,не стоит боятся ,просто пишем:

To solve this:

1)press "i" (i for insert)
2)write your merge message
3)press "esc" (escape)
4)write ":wq" (write & quit)
5)then press enter

4. Если данные в удаленном репозитории и в локальном в одном файле не совпадают и не выгружаются через git pull и git push :
1)Можно обратиться к разработчику - смотреть пункт 12 в командах
2)Или заходим в локальный репозиторий в файл где есть ошибка,затем открываем его и нам система сама покажет где ошибка,мы просто удаляем все что нам не нужно и оставляем только те строки которые хотим оставить
3)И после этих манипуляций вводим команды :
					git add . 
					git commit -am "комментарий"
					git push
5. если две разные версии в двух разных репозиториях:
1)в нашем файле на локальном убираем ненужные строки,которые показывает нам система 



git flow:
1) создаем репозиторий и мэйн ветку где хранится код соотвествующий продовскому
2) создаем себе его копию - develop ветку и начинаем работать над ней
3)когда разработчику нужно переключится на какую то фичу он создает себе отдельную ветку feature ветку и по окончанию работы заливает все в девелоп ветку
4)Если все хорошо работает на develop ветке и все проходит - нам создают realease ветку и обычно тестировщики работают на этой ветке и она считается стабильной . На этой ветке происходит только правка багов,больше ничего
5) когда убеждаемся ,что все хорошо то эту релиз ветку мы заливаем в мейн ветку и в девелоп ветку

в git чаще всего работают с txt файлами
